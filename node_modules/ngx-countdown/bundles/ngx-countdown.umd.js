(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-countdown', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ngx-countdown'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    var Timer = /** @class */ (function () {
        function Timer() {
            this.fns = [];
            this.commands = [];
            this.ing = false;
        }
        Timer.prototype.start = function () {
            if (this.ing === true)
                return;
            this.ing = true;
            this.nextTime = +new Date();
            this.process();
        };
        Timer.prototype.process = function () {
            var _this = this;
            while (this.commands.length) {
                this.commands.shift()();
            }
            var diff = +new Date() - this.nextTime;
            var count = 1 + Math.floor(diff / 100);
            diff = 100 - diff % 100;
            this.nextTime += 100 * count;
            var frequency, step, i, len;
            for (i = 0, len = this.fns.length; i < len; i += 2) {
                frequency = this.fns[i + 1];
                // 100/s
                if (0 === frequency) {
                    this.fns[i](count);
                    // 1000/s
                }
                else {
                    // 先把末位至0，再每次加2
                    frequency += 2 * count - 1;
                    step = Math.floor(frequency / 20);
                    if (step > 0) {
                        this.fns[i](step);
                    }
                    // 把末位还原成1
                    this.fns[i + 1] = frequency % 20 + 1;
                }
            }
            if (this.ing) {
                setTimeout(function () { return _this.process(); }, diff);
            }
        };
        Timer.prototype.add = function (fn, frequency) {
            var _this = this;
            this.commands.push(function () {
                _this.fns.push(fn);
                _this.fns.push(frequency === 1000 ? 1 : 0);
                _this.ing = true;
            });
        };
        Timer.prototype.remove = function (fn) {
            var _this = this;
            this.commands.push(function () {
                var i = _this.fns.indexOf(fn);
                if (i !== -1) {
                    _this.fns.splice(i, 2);
                }
                _this.ing = _this.fns.length > 0;
            });
        };
        Timer.decorators = [
            { type: core.Injectable }
        ];
        return Timer;
    }());

    var CountdownComponent = /** @class */ (function () {
        function CountdownComponent(el, timer) {
            this.el = el;
            this.timer = timer;
            this.frequency = 1000;
            this._notify = {};
            this.hands = [];
            this.left = 0;
            this.paused = false;
            /** 两种情况会触发：时间终止或调用 `stop()` */
            this.stoped = false;
            this.start = new core.EventEmitter();
            this.finished = new core.EventEmitter();
            this.notify = new core.EventEmitter();
            this.event = new core.EventEmitter();
        }
        /** 开始，当 `demand: false` 时触发 */
        CountdownComponent.prototype.begin = function () {
            this.paused = false;
            this.start.emit();
            this.callEvent('start');
        };
        /** 重新开始 */
        CountdownComponent.prototype.restart = function () {
            if (!this.stoped)
                this.destroy();
            this.init();
            this.callEvent('restart');
        };
        /** 停止 */
        CountdownComponent.prototype.stop = function () {
            if (this.stoped)
                return;
            this.stoped = true;
            this.destroy();
            this.callEvent('stop');
        };
        /** 暂停（限未终止有效） */
        CountdownComponent.prototype.pause = function () {
            if (this.stoped || this.paused)
                return;
            this.paused = true;
            this.callEvent('pause');
        };
        /** 恢复 */
        CountdownComponent.prototype.resume = function () {
            if (this.stoped || !this.paused)
                return;
            this.paused = false;
            this.callEvent('resume');
        };
        CountdownComponent.prototype.callEvent = function (action) {
            this.event.emit({ action: action, left: this.left });
        };
        CountdownComponent.prototype.init = function () {
            var me = this;
            me.config = Object.assign({
                demand: false,
                leftTime: 0,
                template: '$!h!时$!m!分$!s!秒',
                effect: 'normal',
                varRegular: /\$\!([\-\w]+)\!/g,
                clock: ['d', 100, 2, 'h', 24, 2, 'm', 60, 2, 's', 60, 2, 'u', 10, 1],
            }, me.config);
            var el = me.el.nativeElement;
            me.paused = me.config.demand;
            me.stoped = false;
            // 分析markup
            var tmpl = el.innerHTML || me.config.template;
            me.config.varRegular.lastIndex = 0;
            el.innerHTML = tmpl.replace(me.config.varRegular, function (str, type) {
                // 时钟频率校正.
                if (type === 'u' || type === 's-ext')
                    me.frequency = 100;
                // 生成hand的markup
                var content = '';
                if (type === 's-ext') {
                    me.hands.push({ type: 's' });
                    me.hands.push({ type: 'u' });
                    content =
                        me.html('', 's', 'handlet') +
                            me.html('.', '', 'digital') +
                            me.html('', 'u', 'handlet');
                }
                else {
                    me.hands.push({ type: type });
                }
                return me.html(content, type, 'hand');
            });
            var clock = me.config.clock;
            me.hands.forEach(function (hand) {
                var type = hand.type;
                var base = 100, i;
                hand.node = el.querySelector(".hand-" + type);
                // radix, bits 初始化
                for (i = clock.length - 3; i > -1; i -= 3) {
                    if (type === clock[i]) {
                        break;
                    }
                    base *= clock[i + 1];
                }
                hand.base = base;
                hand.radix = clock[i + 1];
                hand.bits = clock[i + 2];
            });
            me.getLeft();
            me.reflow(0, true);
            // bind reflow to me
            var _reflow = me.reflow;
            me.reflow = function (count) {
                if (count === void 0) {
                    count = 0;
                }
                return _reflow.apply(me, [count]);
            };
            // 构建 notify
            if (me.config.notify) {
                me.config.notify.forEach(function (time) {
                    if (time < 1)
                        throw new Error("the notify config must be a positive integer.");
                    time = time * 1000;
                    time = time - (time % me.frequency);
                    me._notify[time] = true;
                });
            }
            me.timer.add(me.reflow, me.frequency);
            // show
            el.style.display = 'inline';
            this.timer.start();
            return me;
        };
        CountdownComponent.prototype.destroy = function () {
            this.timer.remove(this.reflow);
            return this;
        };
        /**
         * 更新时钟
         */
        CountdownComponent.prototype.reflow = function (count, force) {
            if (count === void 0) {
                count = 0;
            }
            if (force === void 0) {
                force = false;
            }
            var me = this;
            if (!force && (me.paused || me.stoped))
                return;
            me.left = me.left - me.frequency * count;
            me.hands.forEach(function (hand) {
                hand.lastValue = hand.value;
                hand.value = Math.floor(me.left / hand.base) % hand.radix;
            });
            me.repaint();
            if (me._notify[me.left]) {
                me.notify.emit(me.left);
                me.callEvent('notify');
            }
            if (me.left < 1) {
                me.finished.emit(0);
                me.stoped = true;
                me.callEvent('finished');
                me.destroy();
            }
        };
        /**
         * 重绘时钟
         */
        CountdownComponent.prototype.repaint = function () {
            var me = this;
            if (me.config.repaint) {
                me.config.repaint.apply(me);
                return;
            }
            var content;
            me.hands.forEach(function (hand) {
                if (hand.lastValue !== hand.value) {
                    content = '';
                    me.toDigitals(hand.value, hand.bits).forEach(function (digital) {
                        content += me.html(digital.toString(), '', 'digital');
                    });
                    hand.node.innerHTML = content;
                }
            });
        };
        /**
         * 获取倒计时剩余帧数
         */
        CountdownComponent.prototype.getLeft = function () {
            var me = this;
            var left = me.config.leftTime * 1000;
            var end = me.config.stopTime;
            if (!left && end)
                left = end - new Date().getTime();
            me.left = left - (left % me.frequency);
        };
        /**
         * 生成需要的html代码，辅助工具
         */
        CountdownComponent.prototype.html = function (con, className, type) {
            switch (type) {
                case 'hand':
                case 'handlet':
                    className = type + ' hand-' + className;
                    break;
                case 'digital':
                    if (con === '.') {
                        className = type + ' ' + type + '-point ' + className;
                    }
                    else {
                        className = type + ' ' + type + '-' + con + ' ' + className;
                    }
                    break;
            }
            return '<span class="' + className + '">' + con + '</span>';
        };
        /**
         * 把值转换为独立的数字形式
         */
        CountdownComponent.prototype.toDigitals = function (value, bits) {
            value = value < 0 ? 0 : value;
            var digitals = [];
            // 把时、分、秒等换算成数字.
            while (bits--) {
                digitals[bits] = value % 10;
                value = Math.floor(value / 10);
            }
            return digitals;
        };
        CountdownComponent.prototype.ngOnInit = function () {
            this.init();
            if (!this.config.demand)
                this.begin();
        };
        CountdownComponent.prototype.ngOnDestroy = function () {
            this.destroy();
        };
        CountdownComponent.prototype.ngOnChanges = function (changes) {
            if (!changes.config.firstChange) {
                this.restart();
            }
        };
        CountdownComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'countdown',
                        template: "<ng-content></ng-content>",
                        host: { '[class.count-down]': 'true' },
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        styles: ["\n      :host {\n        display: none;\n      }\n    "]
                    }] }
        ];
        /** @nocollapse */
        CountdownComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: Timer }
            ];
        };
        CountdownComponent.propDecorators = {
            config: [{ type: core.Input }],
            start: [{ type: core.Output }],
            finished: [{ type: core.Output }],
            notify: [{ type: core.Output }],
            event: [{ type: core.Output }]
        };
        return CountdownComponent;
    }());

    var CountdownModule = /** @class */ (function () {
        function CountdownModule() {
        }
        CountdownModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        providers: [Timer],
                        declarations: [CountdownComponent],
                        exports: [CountdownComponent]
                    },] }
        ];
        return CountdownModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CountdownComponent = CountdownComponent;
    exports.Timer = Timer;
    exports.CountdownModule = CountdownModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,