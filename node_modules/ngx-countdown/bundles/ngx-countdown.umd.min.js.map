{"version":3,"sources":["ng://ngx-countdown/src/countdown.timer.ts","ng://ngx-countdown/src/countdown.component.ts","ng://ngx-countdown/src/countdown.module.ts"],"names":["Timer","this","fns","commands","ing","prototype","start","nextTime","Date","process","_this","length","shift","frequency","step","i","len","diff","count","Math","floor","setTimeout","add","fn","push","remove","indexOf","splice","Injectable","CountdownComponent","el","timer","_notify","hands","left","paused","stoped","EventEmitter","finished","notify","event","begin","emit","callEvent","restart","destroy","init","stop","pause","resume","action","me","config","Object","assign","demand","leftTime","template","effect","varRegular","clock","nativeElement","tmpl","innerHTML","lastIndex","replace","str","type","content","html","forEach","hand","base","node","querySelector","radix","bits","getLeft","reflow","_reflow","apply","time","Error","style","display","force","lastValue","value","repaint","toDigitals","digital","toString","end","stopTime","getTime","con","className","digitals","ngOnInit","ngOnDestroy","ngOnChanges","changes","firstChange","Component","args","selector","host","[class.count-down]","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Input","Output","CountdownModule","NgModule","imports","CommonModule","providers","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class Timer {\r\n  private fns: any[] = [];\r\n  private commands: Function[] = [];\r\n  private nextTime: number;\r\n  private ing = false;\r\n\r\n  start() {\r\n    if (this.ing === true) return;\r\n\r\n    this.ing = true;\r\n    this.nextTime = +new Date();\r\n    this.process();\r\n  }\r\n\r\n  private process() {\r\n    while (this.commands.length) {\r\n      this.commands.shift()();\r\n    }\r\n    let diff = +new Date() - this.nextTime;\r\n    const count = 1 + Math.floor(diff / 100);\r\n\r\n    diff = 100 - diff % 100;\r\n    this.nextTime += 100 * count;\r\n\r\n    let frequency: number, step: number, i: number, len: number;\r\n    for (i = 0, len = this.fns.length; i < len; i += 2) {\r\n      frequency = this.fns[i + 1];\r\n\r\n      // 100/s\r\n      if (0 === frequency) {\r\n        this.fns[i](count);\r\n        // 1000/s\r\n      } else {\r\n        // åææ«ä½è³0ï¼åæ¯æ¬¡å 2\r\n        frequency += 2 * count - 1;\r\n\r\n        step = Math.floor(frequency / 20);\r\n        if (step > 0) {\r\n          this.fns[i](step);\r\n        }\r\n\r\n        // ææ«ä½è¿åæ1\r\n        this.fns[i + 1] = frequency % 20 + 1;\r\n      }\r\n    }\r\n\r\n    if (this.ing) {\r\n      setTimeout(() => this.process(), diff);\r\n    }\r\n  }\r\n\r\n  add(fn: Function, frequency: number) {\r\n    this.commands.push(() => {\r\n      this.fns.push(fn);\r\n      this.fns.push(frequency === 1000 ? 1 : 0);\r\n      this.ing = true;\r\n    });\r\n  }\r\n\r\n  remove(fn: Function) {\r\n    this.commands.push(() => {\r\n      const i = this.fns.indexOf(fn);\r\n      if (i !== -1) {\r\n        this.fns.splice(i, 2);\r\n      }\r\n      this.ing = this.fns.length > 0;\r\n    });\r\n  }\r\n}\r\n","import {\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  OnInit,\n  SimpleChange,\n  ChangeDetectionStrategy,\n} from '@angular/core';\n\nimport { Config, Hand } from './interfaces';\nimport { Timer } from './countdown.timer';\n\n@Component({\n  selector: 'countdown',\n  template: `<ng-content></ng-content>`,\n  styles: [\n    `\n      :host {\n        display: none;\n      }\n    `,\n  ],\n  host: { '[class.count-down]': 'true' },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CountdownComponent implements OnInit, OnChanges, OnDestroy {\n  private frequency = 1000;\n  private _notify: any = {};\n  private hands: Hand[] = [];\n  private left = 0;\n  private paused = false;\n  /** ä¸¤ç§æåµä¼è§¦åï¼æ¶é´ç»æ­¢æè°ç¨ `stop()` */\n  private stoped = false;\n\n  @Input()\n  config: Config;\n  @Output()\n  start = new EventEmitter();\n  @Output()\n  finished = new EventEmitter();\n  @Output()\n  notify = new EventEmitter();\n  @Output()\n  event = new EventEmitter<{ action: string; left: number }>();\n\n  constructor(private el: ElementRef, private timer: Timer) {}\n\n  /** å¼å§ï¼å½ `demand: false` æ¶è§¦å */\n  begin() {\n    this.paused = false;\n    this.start.emit();\n    this.callEvent('start');\n  }\n\n  /** éæ°å¼å§ */\n  restart(): void {\n    if (!this.stoped) this.destroy();\n    this.init();\n    this.callEvent('restart');\n  }\n\n  /** åæ­¢ */\n  stop() {\n    if (this.stoped) return;\n    this.stoped = true;\n    this.destroy();\n    this.callEvent('stop');\n  }\n\n  /** æåï¼éæªç»æ­¢ææï¼ */\n  pause() {\n    if (this.stoped || this.paused) return;\n    this.paused = true;\n    this.callEvent('pause');\n  }\n\n  /** æ¢å¤ */\n  resume() {\n    if (this.stoped || !this.paused) return;\n    this.paused = false;\n    this.callEvent('resume');\n  }\n\n  private callEvent(action: string) {\n    this.event.emit({ action, left: this.left });\n  }\n\n  private init() {\n    const me = this;\n    me.config = Object.assign(\n      <Config>{\n        demand: false,\n        leftTime: 0,\n        template: '$!h!æ¶$!m!å$!s!ç§',\n        effect: 'normal',\n        varRegular: /\\$\\!([\\-\\w]+)\\!/g,\n        clock: ['d', 100, 2, 'h', 24, 2, 'm', 60, 2, 's', 60, 2, 'u', 10, 1],\n      },\n      me.config,\n    );\n    const el = me.el.nativeElement as HTMLElement;\n    me.paused = me.config.demand;\n    me.stoped = false;\n\n    // åæmarkup\n    const tmpl = el.innerHTML || me.config.template;\n    me.config.varRegular.lastIndex = 0;\n    el.innerHTML = tmpl.replace(\n      me.config.varRegular,\n      (str: string, type: string) => {\n        // æ¶éé¢çæ ¡æ­£.\n        if (type === 'u' || type === 's-ext') me.frequency = 100;\n\n        // çæhandçmarkup\n        let content = '';\n        if (type === 's-ext') {\n          me.hands.push({ type: 's' });\n          me.hands.push({ type: 'u' });\n          content =\n            me.html('', 's', 'handlet') +\n            me.html('.', '', 'digital') +\n            me.html('', 'u', 'handlet');\n        } else {\n          me.hands.push({ type: type });\n        }\n\n        return me.html(content, type, 'hand');\n      },\n    );\n\n    const clock = me.config.clock;\n    me.hands.forEach((hand: Hand) => {\n      const type = hand.type;\n      let base = 100,\n        i: number;\n\n      hand.node = el.querySelector(`.hand-${type}`);\n      // radix, bits åå§å\n      for (i = clock.length - 3; i > -1; i -= 3) {\n        if (type === clock[i]) {\n          break;\n        }\n\n        base *= clock[i + 1];\n      }\n      hand.base = base;\n      hand.radix = clock[i + 1];\n      hand.bits = clock[i + 2];\n    });\n\n    me.getLeft();\n    me.reflow(0, true);\n\n    // bind reflow to me\n    const _reflow = me.reflow;\n    me.reflow = (count: number = 0) => {\n      return _reflow.apply(me, [count]);\n    };\n\n    // æå»º notify\n    if (me.config.notify) {\n      me.config.notify.forEach((time: number) => {\n        if (time < 1)\n          throw new Error(`the notify config must be a positive integer.`);\n        time = time * 1000;\n        time = time - (time % me.frequency);\n        me._notify[time] = true;\n      });\n    }\n\n    me.timer.add(me.reflow, me.frequency);\n    // show\n    el.style.display = 'inline';\n\n    this.timer.start();\n\n    return me;\n  }\n\n  private destroy() {\n    this.timer.remove(this.reflow);\n    return this;\n  }\n\n  /**\n   * æ´æ°æ¶é\n   */\n  private reflow(count: number = 0, force: boolean = false): void {\n    const me = this;\n    if (!force && (me.paused || me.stoped)) return;\n    me.left = me.left - me.frequency * count;\n\n    me.hands.forEach((hand: Hand) => {\n      hand.lastValue = hand.value;\n      hand.value = Math.floor(me.left / hand.base) % hand.radix;\n    });\n\n    me.repaint();\n\n    if (me._notify[me.left]) {\n      me.notify.emit(me.left);\n      me.callEvent('notify');\n    }\n\n    if (me.left < 1) {\n      me.finished.emit(0);\n      me.stoped = true;\n      me.callEvent('finished');\n      me.destroy();\n    }\n  }\n\n  /**\n   * éç»æ¶é\n   */\n  private repaint(): void {\n    const me = this;\n    if (me.config.repaint) {\n      me.config.repaint.apply(me);\n      return;\n    }\n\n    let content: string;\n\n    me.hands.forEach((hand: Hand) => {\n      if (hand.lastValue !== hand.value) {\n        content = '';\n\n        me.toDigitals(hand.value, hand.bits).forEach((digital: number) => {\n          content += me.html(digital.toString(), '', 'digital');\n        });\n\n        hand.node.innerHTML = content;\n      }\n    });\n  }\n\n  /**\n   * è·ååè®¡æ¶å©ä½å¸§æ°\n   */\n  private getLeft(): void {\n    const me = this;\n    let left: number = me.config.leftTime * 1000;\n    const end: number = me.config.stopTime;\n\n    if (!left && end) left = end - new Date().getTime();\n\n    me.left = left - (left % me.frequency);\n  }\n\n  /**\n   * çæéè¦çhtmlä»£ç ï¼è¾å©å·¥å·\n   */\n  private html(con: string, className: string, type: string): string {\n    switch (type) {\n      case 'hand':\n      case 'handlet':\n        className = type + ' hand-' + className;\n        break;\n      case 'digital':\n        if (con === '.') {\n          className = type + ' ' + type + '-point ' + className;\n        } else {\n          className = type + ' ' + type + '-' + con + ' ' + className;\n        }\n        break;\n    }\n    return '<span class=\"' + className + '\">' + con + '</span>';\n  }\n\n  /**\n   * æå¼è½¬æ¢ä¸ºç¬ç«çæ°å­å½¢å¼\n   */\n  private toDigitals(value: number, bits: number): number[] {\n    value = value < 0 ? 0 : value;\n    const digitals = [];\n    // ææ¶ãåãç§ç­æ¢ç®ææ°å­.\n    while (bits--) {\n      digitals[bits] = value % 10;\n      value = Math.floor(value / 10);\n    }\n    return digitals;\n  }\n\n  ngOnInit() {\n    this.init();\n    if (!this.config.demand) this.begin();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy();\n  }\n\n  ngOnChanges(\n    changes: { [P in keyof this]?: SimpleChange } & SimpleChanges,\n  ): void {\n    if (!changes.config.firstChange) {\n      this.restart();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CountdownComponent } from './countdown.component';\nimport { Timer } from './countdown.timer';\n\n@NgModule({\n    imports:        [CommonModule],\n    providers:      [Timer],\n    declarations:   [CountdownComponent],\n    exports:        [CountdownComponent]\n})\nexport class CountdownModule {\n}\n"]}